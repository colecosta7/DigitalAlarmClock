
P3DigitalAlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002830  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001307  00000000  00000000  00025430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00026738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00026d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c7d  00000000  00000000  00027280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ab5  00000000  00000000  0004befd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1046  00000000  00000000  000529b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001339f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a4  00000000  00000000  00133a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800243c 	.word	0x0800243c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800243c 	.word	0x0800243c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <keypad_config>:

#include "keypad_lib.h"
//2d constant lookup table to find each number
const int8_t keypad_matrix[4][4] = {{1,2,3,10}, {4,5,6,11}, {7,8,9,12}, {14, 0, 15, 13}};

void keypad_config(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
 80001dc:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <keypad_config+0x80>)
 80001de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <keypad_config+0x80>)
 80001e2:	f043 0306 	orr.w	r3, r3, #6
 80001e6:	64d3      	str	r3, [r2, #76]	; 0x4c

	//Enable Rows and Cols MODE Register
	//Sets ROW as INPUT type
	ROW_PORT -> MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
 80001e8:	4b1c      	ldr	r3, [pc, #112]	; (800025c <keypad_config+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1b      	ldr	r2, [pc, #108]	; (800025c <keypad_config+0x84>)
 80001ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80001f2:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODE7);

	//Sets COL as OUTPUT type
	COL_PORT -> MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
 80001f4:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <keypad_config+0x88>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a19      	ldr	r2, [pc, #100]	; (8000260 <keypad_config+0x88>)
 80001fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80001fe:	6013      	str	r3, [r2, #0]
				GPIO_MODER_MODE7);
	COL_PORT -> MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <keypad_config+0x88>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a16      	ldr	r2, [pc, #88]	; (8000260 <keypad_config+0x88>)
 8000206:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800020a:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODE7_0);

	//Enable PUPDR as PULL DOWN for ROWS
	ROW_PORT -> PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 |
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <keypad_config+0x84>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <keypad_config+0x84>)
 8000212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000216:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7);
	ROW_PORT -> PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1 |
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <keypad_config+0x84>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <keypad_config+0x84>)
 800021e:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000222:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7_1);

	//Enable PUPDR as OFF for COLS
	COL_PORT -> PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 |
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <keypad_config+0x88>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <keypad_config+0x88>)
 800022a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800022e:	60d3      	str	r3, [r2, #12]
			GPIO_PUPDR_PUPD7);

	//Enable LOW Output Speed for COLS
	COL_PORT -> OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 |
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <keypad_config+0x88>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <keypad_config+0x88>)
 8000236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800023a:	6093      	str	r3, [r2, #8]
			GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);

	//Enable OTYPE to Push Pull for COLS
	COL_PORT -> OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 |
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <keypad_config+0x88>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <keypad_config+0x88>)
 8000242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000246:	6053      	str	r3, [r2, #4]
			GPIO_OTYPER_OT7);

	//Turn on all COLS
	COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <keypad_config+0x88>)
 800024a:	22f0      	movs	r2, #240	; 0xf0
 800024c:	619a      	str	r2, [r3, #24]


}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000
 800025c:	48000800 	.word	0x48000800
 8000260:	48000400 	.word	0x48000400

08000264 <keypad_getKey>:

int8_t keypad_getKey(void){
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
	//if a row is detected high
	if(ROW_PORT -> IDR & ROW_MASK){
 800026a:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <keypad_getKey+0xb4>)
 800026c:	691b      	ldr	r3, [r3, #16]
 800026e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d044      	beq.n	8000300 <keypad_getKey+0x9c>
		int8_t row_num = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]
		int8_t col_num = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	73bb      	strb	r3, [r7, #14]
		//turn off all columns
		COL_PORT -> BRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <keypad_getKey+0xb8>)
 8000280:	22f0      	movs	r2, #240	; 0xf0
 8000282:	629a      	str	r2, [r3, #40]	; 0x28
		//iterate through each column
		for(int col = GPIO_PIN_4; col <= GPIO_PIN_7; col <<= 1){
 8000284:	2310      	movs	r3, #16
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e037      	b.n	80002fa <keypad_getKey+0x96>
			//turn on individual column
			COL_PORT -> BSRR = col;
 800028a:	4a24      	ldr	r2, [pc, #144]	; (800031c <keypad_getKey+0xb8>)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	6193      	str	r3, [r2, #24]
			//if a Row is high on this column
			if(ROW_PORT -> IDR & ROW_MASK){
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <keypad_getKey+0xb4>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d022      	beq.n	80002e2 <keypad_getKey+0x7e>
				//iterate through each row
				for(int row = GPIO_PIN_4; row <= GPIO_PIN_7; row <<= 1){
 800029c:	2310      	movs	r3, #16
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e01c      	b.n	80002dc <keypad_getKey+0x78>
					//if the row is high
					if(ROW_PORT -> IDR & row){
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <keypad_getKey+0xb4>)
 80002a4:	691a      	ldr	r2, [r3, #16]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4013      	ands	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d00d      	beq.n	80002ca <keypad_getKey+0x66>
						//Turn on all the columns to prepare for the next key press
						COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 |
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <keypad_getKey+0xb8>)
 80002b0:	22f0      	movs	r2, #240	; 0xf0
 80002b2:	619a      	str	r2, [r3, #24]
								GPIO_PIN_7);
						//return the right number from 2d lookup table
						return keypad_matrix[row_num][col_num];
 80002b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80002b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002bc:	4918      	ldr	r1, [pc, #96]	; (8000320 <keypad_getKey+0xbc>)
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	440a      	add	r2, r1
 80002c2:	4413      	add	r3, r2
 80002c4:	f993 3000 	ldrsb.w	r3, [r3]
 80002c8:	e01f      	b.n	800030a <keypad_getKey+0xa6>
					}
					//else increment
					row_num++;
 80002ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	3301      	adds	r3, #1
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	73fb      	strb	r3, [r7, #15]
				for(int row = GPIO_PIN_4; row <= GPIO_PIN_7; row <<= 1){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b80      	cmp	r3, #128	; 0x80
 80002e0:	dddf      	ble.n	80002a2 <keypad_getKey+0x3e>
				}
			}
			//else increment column # and turn off the column
			col_num++;
 80002e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	3301      	adds	r3, #1
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	73bb      	strb	r3, [r7, #14]
			COL_PORT -> BRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 |
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <keypad_getKey+0xb8>)
 80002f0:	22f0      	movs	r2, #240	; 0xf0
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
		for(int col = GPIO_PIN_4; col <= GPIO_PIN_7; col <<= 1){
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	2b80      	cmp	r3, #128	; 0x80
 80002fe:	ddc4      	ble.n	800028a <keypad_getKey+0x26>
					GPIO_PIN_7);
		}
	}
	//if no key press, return -1
	COL_PORT -> BSRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <keypad_getKey+0xb8>)
 8000302:	22f0      	movs	r2, #240	; 0xf0
 8000304:	619a      	str	r2, [r3, #24]

	return -1;
 8000306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800030a:	4618      	mov	r0, r3
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	48000800 	.word	0x48000800
 800031c:	48000400 	.word	0x48000400
 8000320:	080027cc 	.word	0x080027cc

08000324 <keypad_input>:

uint8_t keypad_input(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	 int8_t keypad_pressed = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	73fb      	strb	r3, [r7, #15]
	 uint8_t total_time = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	73bb      	strb	r3, [r7, #14]

	  while (keypad_pressed < 2)
 8000332:	e02f      	b.n	8000394 <keypad_input+0x70>
	  {
		  int8_t key_pressed = keypad_getKey();
 8000334:	f7ff ff96 	bl	8000264 <keypad_getKey>
 8000338:	4603      	mov	r3, r0
 800033a:	71fb      	strb	r3, [r7, #7]
		  if (key_pressed != -1 && key_pressed < 10) {
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000344:	d026      	beq.n	8000394 <keypad_input+0x70>
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b09      	cmp	r3, #9
 800034c:	dc22      	bgt.n	8000394 <keypad_input+0x70>
			  keypad_pressed += 1;
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	3301      	adds	r3, #1
 8000352:	b2db      	uxtb	r3, r3
 8000354:	73fb      	strb	r3, [r7, #15]
			  if (keypad_pressed == 1) {
 8000356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d108      	bne.n	8000370 <keypad_input+0x4c>
				  total_time += (uint8_t) key_pressed * 10;
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	461a      	mov	r2, r3
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	4413      	add	r3, r2
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	7bbb      	ldrb	r3, [r7, #14]
 800036c:	4413      	add	r3, r2
 800036e:	73bb      	strb	r3, [r7, #14]
			  }
			  if (keypad_pressed == 2) {
 8000370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000374:	2b02      	cmp	r3, #2
 8000376:	d103      	bne.n	8000380 <keypad_input+0x5c>
				  total_time += (uint8_t) key_pressed;
 8000378:	79fa      	ldrb	r2, [r7, #7]
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	4413      	add	r3, r2
 800037e:	73bb      	strb	r3, [r7, #14]
			  }
			  for(int i =0; i < 1000000; i++);
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	e002      	b.n	800038c <keypad_input+0x68>
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	3301      	adds	r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <keypad_input+0x84>)
 8000390:	4293      	cmp	r3, r2
 8000392:	ddf8      	ble.n	8000386 <keypad_input+0x62>
	  while (keypad_pressed < 2)
 8000394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000398:	2b01      	cmp	r3, #1
 800039a:	ddcb      	ble.n	8000334 <keypad_input+0x10>
		  }
	  }

	  return total_time;
 800039c:	7bbb      	ldrb	r3, [r7, #14]

}
 800039e:	4618      	mov	r0, r3
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	000f423f 	.word	0x000f423f

080003ac <RTC_init>:
 *      Author: colecosta7
 */

#include "RTC.h"

void RTC_init(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	//USING DEVICE ADDR 0x51 on the EEPROM
	//enable peripheral clock
	RCC -> APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <RTC_init+0xbc>)
 80003b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b4:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <RTC_init+0xbc>)
 80003b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ba:	6593      	str	r3, [r2, #88]	; 0x58
	//disable peripheral / clear PE bit
	I2C1 -> CR1 &= ~(I2C_CR1_PE);
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <RTC_init+0xc0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2a      	ldr	r2, [pc, #168]	; (800046c <RTC_init+0xc0>)
 80003c2:	f023 0301 	bic.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]
	//Enable Analog Noise Filter
	I2C1 -> CR1 &= ~(I2C_CR1_ANFOFF);
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <RTC_init+0xc0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a27      	ldr	r2, [pc, #156]	; (800046c <RTC_init+0xc0>)
 80003ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003d2:	6013      	str	r3, [r2, #0]
	//Disable Digital Noise Filter
	I2C1 -> CR1 &= ~(I2C_CR1_DNF);
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <RTC_init+0xc0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a24      	ldr	r2, [pc, #144]	; (800046c <RTC_init+0xc0>)
 80003da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003de:	6013      	str	r3, [r2, #0]
	//configure timing for I2C, from MXTOOL
	I2C1 -> TIMINGR = TIMING_FACTOR_RTC;
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <RTC_init+0xc0>)
 80003e2:	4a23      	ldr	r2, [pc, #140]	; (8000470 <RTC_init+0xc4>)
 80003e4:	611a      	str	r2, [r3, #16]
	//clock stretching enabled for master mode
	I2C1 -> CR1 &= ~(I2C_CR1_NOSTRETCH);
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <RTC_init+0xc0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a20      	ldr	r2, [pc, #128]	; (800046c <RTC_init+0xc0>)
 80003ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003f0:	6013      	str	r3, [r2, #0]
	//enable peripheral
	I2C1 -> CR1 |= (I2C_CR1_PE);
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <RTC_init+0xc0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a1d      	ldr	r2, [pc, #116]	; (800046c <RTC_init+0xc0>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]

	//setup GPIO PINS PB8 and PB9 for AF4
	//PB8: SCL, PB9: SDA
	//enable clocks GPIOB
	RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <RTC_init+0xbc>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a19      	ldr	r2, [pc, #100]	; (8000468 <RTC_init+0xbc>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Alternate Function mode AF4
	GPIOB -> MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <RTC_init+0xc8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a19      	ldr	r2, [pc, #100]	; (8000474 <RTC_init+0xc8>)
 8000410:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000414:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << GPIO_MODER_MODE8_Pos |
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <RTC_init+0xc8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a16      	ldr	r2, [pc, #88]	; (8000474 <RTC_init+0xc8>)
 800041c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000420:	6013      	str	r3, [r2, #0]
						2 << GPIO_MODER_MODE9_Pos);
	GPIOB -> AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <RTC_init+0xc8>)
 8000424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000426:	4a13      	ldr	r2, [pc, #76]	; (8000474 <RTC_init+0xc8>)
 8000428:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800042c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB -> AFR[1] |= (4 << GPIO_AFRH_AFSEL8_Pos |
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <RTC_init+0xc8>)
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	4a10      	ldr	r2, [pc, #64]	; (8000474 <RTC_init+0xc8>)
 8000434:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000438:	6253      	str	r3, [r2, #36]	; 0x24
						4 << GPIO_AFRH_AFSEL9_Pos);
	//Set open drain SDA and SCL
	GPIOB -> OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <RTC_init+0xc8>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <RTC_init+0xc8>)
 8000440:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000444:	6053      	str	r3, [r2, #4]
	//high speed
	GPIOB -> OSPEEDR |= (2 << GPIO_OSPEEDR_OSPEED8_Pos | 2 << GPIO_OSPEEDR_OSPEED9_Pos);
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <RTC_init+0xc8>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <RTC_init+0xc8>)
 800044c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000450:	6093      	str	r3, [r2, #8]
	//no pull up or pull down - will use a 5.1k resistor in hardware
	GPIOB -> PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <RTC_init+0xc8>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <RTC_init+0xc8>)
 8000458:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800045c:	60d3      	str	r3, [r2, #12]
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40005400 	.word	0x40005400
 8000470:	00200c28 	.word	0x00200c28
 8000474:	48000400 	.word	0x48000400

08000478 <RTC_write>:

void RTC_write(uint8_t addr, uint8_t data){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
	//set the number of bytes to be sent
	I2C1 -> CR2 &= ~(I2C_CR2_NBYTES);
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <RTC_write+0xb8>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a28      	ldr	r2, [pc, #160]	; (8000530 <RTC_write+0xb8>)
 800048e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000492:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000494:	4b26      	ldr	r3, [pc, #152]	; (8000530 <RTC_write+0xb8>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a25      	ldr	r2, [pc, #148]	; (8000530 <RTC_write+0xb8>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049e:	6053      	str	r3, [r2, #4]
	//configure the slave address
	I2C1 -> CR2 &= ~(I2C_CR2_SADD);
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <RTC_write+0xb8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	4a22      	ldr	r2, [pc, #136]	; (8000530 <RTC_write+0xb8>)
 80004a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80004aa:	f023 0303 	bic.w	r3, r3, #3
 80004ae:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (RTC_ADDR << 1);
 80004b0:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <RTC_write+0xb8>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <RTC_write+0xb8>)
 80004b6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80004ba:	6053      	str	r3, [r2, #4]
	//set the data transfer to a write
	I2C1 -> CR2 &= ~(I2C_CR2_RD_WRN);
 80004bc:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <RTC_write+0xb8>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <RTC_write+0xb8>)
 80004c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004c6:	6053      	str	r3, [r2, #4]
	//set to 7-bit addressing
	I2C1 -> CR2 &= ~(I2C_CR2_ADD10);
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <RTC_write+0xb8>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <RTC_write+0xb8>)
 80004ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004d2:	6053      	str	r3, [r2, #4]
	//set I2C start bit
	I2C1 -> CR2 |= (I2C_CR2_START);
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <RTC_write+0xb8>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a15      	ldr	r2, [pc, #84]	; (8000530 <RTC_write+0xb8>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	6053      	str	r3, [r2, #4]

	//send the address byte
	//wait for TX to be empty
	while(!(I2C1 -> ISR & I2C_ISR_TXIS));
 80004e0:	bf00      	nop
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <RTC_write+0xb8>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <RTC_write+0x6a>
	I2C1 -> TXDR = addr;
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <RTC_write+0xb8>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	6293      	str	r3, [r2, #40]	; 0x28

	//send a byte of data
	//wait for TX to be empty
	while(!(I2C1 -> ISR & I2C_ISR_TXIS));
 80004f4:	bf00      	nop
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <RTC_write+0xb8>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f9      	beq.n	80004f6 <RTC_write+0x7e>
	I2C1 -> TXDR = data;
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <RTC_write+0xb8>)
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	6293      	str	r3, [r2, #40]	; 0x28
	//wait for transfer to complete
	while(!(I2C1 -> ISR & I2C_ISR_TC));
 8000508:	bf00      	nop
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <RTC_write+0xb8>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <RTC_write+0x92>
	//send stop condition
	I2C1 -> CR2 |= (I2C_CR2_STOP);
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <RTC_write+0xb8>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <RTC_write+0xb8>)
 800051c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000520:	6053      	str	r3, [r2, #4]

}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40005400 	.word	0x40005400

08000534 <RTC_read>:

uint8_t RTC_read(uint8_t addr){
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//set the number of bytes to be sent
	I2C1 -> CR2 &= ~(I2C_CR2_NBYTES);
 800053e:	4b40      	ldr	r3, [pc, #256]	; (8000640 <RTC_read+0x10c>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a3f      	ldr	r2, [pc, #252]	; (8000640 <RTC_read+0x10c>)
 8000544:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000548:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <RTC_read+0x10c>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	4a3c      	ldr	r2, [pc, #240]	; (8000640 <RTC_read+0x10c>)
 8000550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000554:	6053      	str	r3, [r2, #4]

	//configure the slave address
	I2C1 -> CR2 &= ~(I2C_CR2_SADD);
 8000556:	4b3a      	ldr	r3, [pc, #232]	; (8000640 <RTC_read+0x10c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a39      	ldr	r2, [pc, #228]	; (8000640 <RTC_read+0x10c>)
 800055c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000560:	f023 0303 	bic.w	r3, r3, #3
 8000564:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (RTC_ADDR << 1);
 8000566:	4b36      	ldr	r3, [pc, #216]	; (8000640 <RTC_read+0x10c>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	4a35      	ldr	r2, [pc, #212]	; (8000640 <RTC_read+0x10c>)
 800056c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000570:	6053      	str	r3, [r2, #4]
	//set the data transfer to a write
	I2C1 -> CR2 &= ~(I2C_CR2_RD_WRN);
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <RTC_read+0x10c>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <RTC_read+0x10c>)
 8000578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800057c:	6053      	str	r3, [r2, #4]
	//set to 7-bit addressing
	I2C1 -> CR2 &= ~(I2C_CR2_ADD10);
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <RTC_read+0x10c>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a2f      	ldr	r2, [pc, #188]	; (8000640 <RTC_read+0x10c>)
 8000584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000588:	6053      	str	r3, [r2, #4]
	//set I2C start bit
	I2C1 -> CR2 |= (I2C_CR2_START);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <RTC_read+0x10c>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <RTC_read+0x10c>)
 8000590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000594:	6053      	str	r3, [r2, #4]

	//send the address byte
	//wait for TX to be empty
	while(!(I2C1 -> ISR & I2C_ISR_TXIS));
 8000596:	bf00      	nop
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <RTC_read+0x10c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f9      	beq.n	8000598 <RTC_read+0x64>
	I2C1 -> TXDR = addr;
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <RTC_read+0x10c>)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	6293      	str	r3, [r2, #40]	; 0x28

	//wait for transfer to complete
	while(!(I2C1 -> ISR & I2C_ISR_TC));
 80005aa:	bf00      	nop
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <RTC_read+0x10c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <RTC_read+0x78>

	//setup read
	//set the number of bytes to be read
	I2C1 -> CR2 &= ~(I2C_CR2_NBYTES);
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <RTC_read+0x10c>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <RTC_read+0x10c>)
 80005be:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80005c2:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <RTC_read+0x10c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <RTC_read+0x10c>)
 80005ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ce:	6053      	str	r3, [r2, #4]
	//configure the slave address
	I2C1 -> CR2 &= ~(I2C_CR2_SADD);
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <RTC_read+0x10c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <RTC_read+0x10c>)
 80005d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80005da:	f023 0303 	bic.w	r3, r3, #3
 80005de:	6053      	str	r3, [r2, #4]
	I2C1 -> CR2 |= (RTC_ADDR << 1);
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <RTC_read+0x10c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <RTC_read+0x10c>)
 80005e6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80005ea:	6053      	str	r3, [r2, #4]
	//set the data transfer to a read
	I2C1 -> CR2 |= (I2C_CR2_RD_WRN);
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <RTC_read+0x10c>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a13      	ldr	r2, [pc, #76]	; (8000640 <RTC_read+0x10c>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6053      	str	r3, [r2, #4]
	//set I2C start bit
	I2C1 -> CR2 |= (I2C_CR2_START);
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <RTC_read+0x10c>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <RTC_read+0x10c>)
 80005fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000602:	6053      	str	r3, [r2, #4]

	//wait for RX to not be empty
	while(!(I2C1 -> ISR & I2C_ISR_RXNE));
 8000604:	bf00      	nop
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <RTC_read+0x10c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <RTC_read+0xd2>
	//read a byte
	data = I2C1 -> RXDR;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <RTC_read+0x10c>)
 8000614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000616:	73fb      	strb	r3, [r7, #15]

	//wait for transfer to complete
	while(!(I2C1 -> ISR & I2C_ISR_TC));
 8000618:	bf00      	nop
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <RTC_read+0x10c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <RTC_read+0xe6>
	//send stop condition
	I2C1 -> CR2 |= (I2C_CR2_STOP);
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <RTC_read+0x10c>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <RTC_read+0x10c>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6053      	str	r3, [r2, #4]

	return data;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40005400 	.word	0x40005400

08000644 <RTC_setTime>:

void RTC_setTime(uint8_t sec, uint8_t min, uint8_t hour,
		uint8_t day, uint8_t date, uint8_t month, uint8_t year){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4603      	mov	r3, r0
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	460b      	mov	r3, r1
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	4613      	mov	r3, r2
 8000660:	713b      	strb	r3, [r7, #4]
	//write the seconds to the RTC
	RTC_write(SEC_ADDR, sec);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4619      	mov	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff ff06 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 800066c:	2300      	movs	r3, #0
 800066e:	82fb      	strh	r3, [r7, #22]
 8000670:	e005      	b.n	800067e <RTC_setTime+0x3a>
 8000672:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000676:	b29b      	uxth	r3, r3
 8000678:	3301      	adds	r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	82fb      	strh	r3, [r7, #22]
 800067e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000686:	dbf4      	blt.n	8000672 <RTC_setTime+0x2e>
	//write the minutes to the RTC
	RTC_write(MIN_ADDR, min);
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fef3 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000692:	2300      	movs	r3, #0
 8000694:	82bb      	strh	r3, [r7, #20]
 8000696:	e005      	b.n	80006a4 <RTC_setTime+0x60>
 8000698:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800069c:	b29b      	uxth	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	82bb      	strh	r3, [r7, #20]
 80006a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ac:	dbf4      	blt.n	8000698 <RTC_setTime+0x54>
	//write the hour to the RTC
	RTC_write(HOUR_ADDR, hour);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2002      	movs	r0, #2
 80006b4:	f7ff fee0 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 80006b8:	2300      	movs	r3, #0
 80006ba:	827b      	strh	r3, [r7, #18]
 80006bc:	e005      	b.n	80006ca <RTC_setTime+0x86>
 80006be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	827b      	strh	r3, [r7, #18]
 80006ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d2:	dbf4      	blt.n	80006be <RTC_setTime+0x7a>
	//write the day to the RTC
	RTC_write(DAY_ADDR, day);
 80006d4:	793b      	ldrb	r3, [r7, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	2003      	movs	r0, #3
 80006da:	f7ff fecd 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 80006de:	2300      	movs	r3, #0
 80006e0:	823b      	strh	r3, [r7, #16]
 80006e2:	e005      	b.n	80006f0 <RTC_setTime+0xac>
 80006e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	3301      	adds	r3, #1
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	823b      	strh	r3, [r7, #16]
 80006f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80006f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f8:	dbf4      	blt.n	80006e4 <RTC_setTime+0xa0>
	//write the date to the RTC
	RTC_write(DATE_ADDR, date);
 80006fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006fe:	4619      	mov	r1, r3
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff feb9 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000706:	2300      	movs	r3, #0
 8000708:	81fb      	strh	r3, [r7, #14]
 800070a:	e005      	b.n	8000718 <RTC_setTime+0xd4>
 800070c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000710:	b29b      	uxth	r3, r3
 8000712:	3301      	adds	r3, #1
 8000714:	b29b      	uxth	r3, r3
 8000716:	81fb      	strh	r3, [r7, #14]
 8000718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800071c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000720:	dbf4      	blt.n	800070c <RTC_setTime+0xc8>
	//write the month to the RTC
	RTC_write(MONTH_ADDR, month );
 8000722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000726:	4619      	mov	r1, r3
 8000728:	2005      	movs	r0, #5
 800072a:	f7ff fea5 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 800072e:	2300      	movs	r3, #0
 8000730:	81bb      	strh	r3, [r7, #12]
 8000732:	e005      	b.n	8000740 <RTC_setTime+0xfc>
 8000734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000738:	b29b      	uxth	r3, r3
 800073a:	3301      	adds	r3, #1
 800073c:	b29b      	uxth	r3, r3
 800073e:	81bb      	strh	r3, [r7, #12]
 8000740:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000748:	dbf4      	blt.n	8000734 <RTC_setTime+0xf0>
	//write the year to the RTC
	RTC_write(YEAR_ADDR, year);
 800074a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800074e:	4619      	mov	r1, r3
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff fe91 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000756:	2300      	movs	r3, #0
 8000758:	817b      	strh	r3, [r7, #10]
 800075a:	e005      	b.n	8000768 <RTC_setTime+0x124>
 800075c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000760:	b29b      	uxth	r3, r3
 8000762:	3301      	adds	r3, #1
 8000764:	b29b      	uxth	r3, r3
 8000766:	817b      	strh	r3, [r7, #10]
 8000768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800076c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000770:	dbf4      	blt.n	800075c <RTC_setTime+0x118>

}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <RTC_readTimes>:

void RTC_readTimes(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
	  uint8_t PM;
	  //variable to hold string
	  char result[4];

	  //clear the screen and cursor to left corner
	  UART_print("\033[2J\033[H");
 8000782:	4881      	ldr	r0, [pc, #516]	; (8000988 <RTC_readTimes+0x20c>)
 8000784:	f000 fa9a 	bl	8000cbc <UART_print>

	  //read convert then print the day of week
	  UART_print("Today is ");
 8000788:	4880      	ldr	r0, [pc, #512]	; (800098c <RTC_readTimes+0x210>)
 800078a:	f000 fa97 	bl	8000cbc <UART_print>
	  //turn on underline
	  UART_print("\033[4m");
 800078e:	4880      	ldr	r0, [pc, #512]	; (8000990 <RTC_readTimes+0x214>)
 8000790:	f000 fa94 	bl	8000cbc <UART_print>
	  day = RTC_read(DAY_ADDR);
 8000794:	2003      	movs	r0, #3
 8000796:	f7ff fecd 	bl	8000534 <RTC_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	  day = HexToDec(day);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fd87 	bl	80012b4 <HexToDec>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
	  if(day == 1)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d103      	bne.n	80007b8 <RTC_readTimes+0x3c>
		  UART_print("Sunday");
 80007b0:	4878      	ldr	r0, [pc, #480]	; (8000994 <RTC_readTimes+0x218>)
 80007b2:	f000 fa83 	bl	8000cbc <UART_print>
 80007b6:	e025      	b.n	8000804 <RTC_readTimes+0x88>
	  else if(day == 2)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d103      	bne.n	80007c6 <RTC_readTimes+0x4a>
		  UART_print("Monday");
 80007be:	4876      	ldr	r0, [pc, #472]	; (8000998 <RTC_readTimes+0x21c>)
 80007c0:	f000 fa7c 	bl	8000cbc <UART_print>
 80007c4:	e01e      	b.n	8000804 <RTC_readTimes+0x88>
	  else if(day == 3)
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d103      	bne.n	80007d4 <RTC_readTimes+0x58>
		  UART_print("Tuesday");
 80007cc:	4873      	ldr	r0, [pc, #460]	; (800099c <RTC_readTimes+0x220>)
 80007ce:	f000 fa75 	bl	8000cbc <UART_print>
 80007d2:	e017      	b.n	8000804 <RTC_readTimes+0x88>
	  else if(day == 4)
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d103      	bne.n	80007e2 <RTC_readTimes+0x66>
		  UART_print("Wednesday");
 80007da:	4871      	ldr	r0, [pc, #452]	; (80009a0 <RTC_readTimes+0x224>)
 80007dc:	f000 fa6e 	bl	8000cbc <UART_print>
 80007e0:	e010      	b.n	8000804 <RTC_readTimes+0x88>
	  else if(day == 5)
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d103      	bne.n	80007f0 <RTC_readTimes+0x74>
		  UART_print("Thursday");
 80007e8:	486e      	ldr	r0, [pc, #440]	; (80009a4 <RTC_readTimes+0x228>)
 80007ea:	f000 fa67 	bl	8000cbc <UART_print>
 80007ee:	e009      	b.n	8000804 <RTC_readTimes+0x88>
	  else if(day == 6)
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d103      	bne.n	80007fe <RTC_readTimes+0x82>
		  UART_print("Friday");
 80007f6:	486c      	ldr	r0, [pc, #432]	; (80009a8 <RTC_readTimes+0x22c>)
 80007f8:	f000 fa60 	bl	8000cbc <UART_print>
 80007fc:	e002      	b.n	8000804 <RTC_readTimes+0x88>
	  else
		  UART_print("Saturday");
 80007fe:	486b      	ldr	r0, [pc, #428]	; (80009ac <RTC_readTimes+0x230>)
 8000800:	f000 fa5c 	bl	8000cbc <UART_print>

	  //move cursor down and to the left and turn off underline
 	  UART_print("\033[1B\033[20D\033[0m");
 8000804:	486a      	ldr	r0, [pc, #424]	; (80009b0 <RTC_readTimes+0x234>)
 8000806:	f000 fa59 	bl	8000cbc <UART_print>

	  //read,convert, then print min, sec, hours
	  UART_print("TIME -  ");
 800080a:	486a      	ldr	r0, [pc, #424]	; (80009b4 <RTC_readTimes+0x238>)
 800080c:	f000 fa56 	bl	8000cbc <UART_print>

	  hour = RTC_read(HOUR_ADDR);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fe8f 	bl	8000534 <RTC_read>
 8000816:	4603      	mov	r3, r0
 8000818:	73bb      	strb	r3, [r7, #14]
	  if((1 << 5) & hour)
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <RTC_readTimes+0xae>
		  PM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	75fb      	strb	r3, [r7, #23]
	  hour = HexToDec(hour & (0x1F));
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd3f 	bl	80012b4 <HexToDec>
 8000836:	4603      	mov	r3, r0
 8000838:	73bb      	strb	r3, [r7, #14]
	  uint16ToString(hour, result);
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	b29b      	uxth	r3, r3
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f920 	bl	8000a88 <uint16ToString>
	  UART_print(result);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fa36 	bl	8000cbc <UART_print>
	  UART_print(":");
 8000850:	4859      	ldr	r0, [pc, #356]	; (80009b8 <RTC_readTimes+0x23c>)
 8000852:	f000 fa33 	bl	8000cbc <UART_print>

	  min = RTC_read(MIN_ADDR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff fe6c 	bl	8000534 <RTC_read>
 800085c:	4603      	mov	r3, r0
 800085e:	737b      	strb	r3, [r7, #13]
	  min = HexToDec(min);
 8000860:	7b7b      	ldrb	r3, [r7, #13]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fd26 	bl	80012b4 <HexToDec>
 8000868:	4603      	mov	r3, r0
 800086a:	737b      	strb	r3, [r7, #13]
	  uint16ToString(min, result);
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	b29b      	uxth	r3, r3
 8000870:	1d3a      	adds	r2, r7, #4
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f907 	bl	8000a88 <uint16ToString>
 	  UART_print(result);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fa1d 	bl	8000cbc <UART_print>
 	  UART_print(":");
 8000882:	484d      	ldr	r0, [pc, #308]	; (80009b8 <RTC_readTimes+0x23c>)
 8000884:	f000 fa1a 	bl	8000cbc <UART_print>

 	  sec = RTC_read(SEC_ADDR);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fe53 	bl	8000534 <RTC_read>
 800088e:	4603      	mov	r3, r0
 8000890:	733b      	strb	r3, [r7, #12]
 	  sec = HexToDec(sec);
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fd0d 	bl	80012b4 <HexToDec>
 800089a:	4603      	mov	r3, r0
 800089c:	733b      	strb	r3, [r7, #12]
 	  uint16ToString(sec, result);
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	1d3a      	adds	r2, r7, #4
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f8ee 	bl	8000a88 <uint16ToString>
 	  UART_print(result);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fa04 	bl	8000cbc <UART_print>

 	  if(PM)
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <RTC_readTimes+0x146>
 		  UART_print(" PM");
 80008ba:	4840      	ldr	r0, [pc, #256]	; (80009bc <RTC_readTimes+0x240>)
 80008bc:	f000 f9fe 	bl	8000cbc <UART_print>
 80008c0:	e002      	b.n	80008c8 <RTC_readTimes+0x14c>
 	  else
 		  UART_print(" AM");
 80008c2:	483f      	ldr	r0, [pc, #252]	; (80009c0 <RTC_readTimes+0x244>)
 80008c4:	f000 f9fa 	bl	8000cbc <UART_print>

 	  //move cursor to the left and down 1 line
 	  UART_print("\033[1B\033[20D");
 80008c8:	483e      	ldr	r0, [pc, #248]	; (80009c4 <RTC_readTimes+0x248>)
 80008ca:	f000 f9f7 	bl	8000cbc <UART_print>

 	  //read, convert, then print month, date, year
 	  UART_print("DATE - ");
 80008ce:	483e      	ldr	r0, [pc, #248]	; (80009c8 <RTC_readTimes+0x24c>)
 80008d0:	f000 f9f4 	bl	8000cbc <UART_print>
 	  month = RTC_read(MONTH_ADDR);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f7ff fe2d 	bl	8000534 <RTC_read>
 80008da:	4603      	mov	r3, r0
 80008dc:	72fb      	strb	r3, [r7, #11]
 	  month = HexToDec(month & 0x1F);
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fce5 	bl	80012b4 <HexToDec>
 80008ea:	4603      	mov	r3, r0
 80008ec:	72fb      	strb	r3, [r7, #11]
 	  uint16ToString(month, result);
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	1d3a      	adds	r2, r7, #4
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8c6 	bl	8000a88 <uint16ToString>
 	  UART_print(result);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f9dc 	bl	8000cbc <UART_print>
 	  UART_print("/");
 8000904:	4831      	ldr	r0, [pc, #196]	; (80009cc <RTC_readTimes+0x250>)
 8000906:	f000 f9d9 	bl	8000cbc <UART_print>

 	  date = RTC_read(DATE_ADDR);
 800090a:	2004      	movs	r0, #4
 800090c:	f7ff fe12 	bl	8000534 <RTC_read>
 8000910:	4603      	mov	r3, r0
 8000912:	72bb      	strb	r3, [r7, #10]
 	  date = HexToDec(date);
 8000914:	7abb      	ldrb	r3, [r7, #10]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fccc 	bl	80012b4 <HexToDec>
 800091c:	4603      	mov	r3, r0
 800091e:	72bb      	strb	r3, [r7, #10]
 	  uint16ToString(date, result);
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	b29b      	uxth	r3, r3
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f8ad 	bl	8000a88 <uint16ToString>
 	  UART_print(result);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f9c3 	bl	8000cbc <UART_print>
 	  UART_print("/");
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <RTC_readTimes+0x250>)
 8000938:	f000 f9c0 	bl	8000cbc <UART_print>

 	  year = RTC_read(YEAR_ADDR);
 800093c:	2006      	movs	r0, #6
 800093e:	f7ff fdf9 	bl	8000534 <RTC_read>
 8000942:	4603      	mov	r3, r0
 8000944:	727b      	strb	r3, [r7, #9]
 	  year = HexToDec(year);
 8000946:	7a7b      	ldrb	r3, [r7, #9]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fcb3 	bl	80012b4 <HexToDec>
 800094e:	4603      	mov	r3, r0
 8000950:	727b      	strb	r3, [r7, #9]
 	  uint16ToString(year, result);
 8000952:	7a7b      	ldrb	r3, [r7, #9]
 8000954:	b29b      	uxth	r3, r3
 8000956:	1d3a      	adds	r2, r7, #4
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f894 	bl	8000a88 <uint16ToString>
 	  UART_print(result);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f9aa 	bl	8000cbc <UART_print>

 	  //delay between prints to the screen
	  for(uint32_t i = 0; i < 1000000; i++);
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	e002      	b.n	8000974 <RTC_readTimes+0x1f8>
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	3301      	adds	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <RTC_readTimes+0x254>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d9f8      	bls.n	800096e <RTC_readTimes+0x1f2>

}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08002454 	.word	0x08002454
 800098c:	0800245c 	.word	0x0800245c
 8000990:	08002468 	.word	0x08002468
 8000994:	08002470 	.word	0x08002470
 8000998:	08002478 	.word	0x08002478
 800099c:	08002480 	.word	0x08002480
 80009a0:	08002488 	.word	0x08002488
 80009a4:	08002494 	.word	0x08002494
 80009a8:	080024a0 	.word	0x080024a0
 80009ac:	080024a8 	.word	0x080024a8
 80009b0:	080024b4 	.word	0x080024b4
 80009b4:	080024c4 	.word	0x080024c4
 80009b8:	080024d0 	.word	0x080024d0
 80009bc:	080024d4 	.word	0x080024d4
 80009c0:	080024d8 	.word	0x080024d8
 80009c4:	080024dc 	.word	0x080024dc
 80009c8:	080024e8 	.word	0x080024e8
 80009cc:	080024f0 	.word	0x080024f0
 80009d0:	000f423f 	.word	0x000f423f

080009d4 <RTC_setAlarmTime>:

void RTC_setAlarmTime(uint8_t sec, uint8_t min, uint8_t hour){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	460b      	mov	r3, r1
 80009e0:	71bb      	strb	r3, [r7, #6]
 80009e2:	4613      	mov	r3, r2
 80009e4:	717b      	strb	r3, [r7, #5]
	//write the alarm seconds to the RTC
	RTC_write(ALARM_SEC_ADDR, sec);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	2007      	movs	r0, #7
 80009ec:	f7ff fd44 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
 80009f4:	e005      	b.n	8000a02 <RTC_setAlarmTime+0x2e>
 80009f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	81fb      	strh	r3, [r7, #14]
 8000a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0a:	dbf4      	blt.n	80009f6 <RTC_setAlarmTime+0x22>
	//write the alarm minutes to the RTC
	RTC_write(ALARM_MIN_ADDR, min);
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff fd31 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000a16:	2300      	movs	r3, #0
 8000a18:	81bb      	strh	r3, [r7, #12]
 8000a1a:	e005      	b.n	8000a28 <RTC_setAlarmTime+0x54>
 8000a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	3301      	adds	r3, #1
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	81bb      	strh	r3, [r7, #12]
 8000a28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a30:	dbf4      	blt.n	8000a1c <RTC_setAlarmTime+0x48>
	//write the alarm hour to the RTC
	RTC_write(ALARM_HOUR_ADDR, hour);
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	4619      	mov	r1, r3
 8000a36:	2009      	movs	r0, #9
 8000a38:	f7ff fd1e 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	817b      	strh	r3, [r7, #10]
 8000a40:	e005      	b.n	8000a4e <RTC_setAlarmTime+0x7a>
 8000a42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	817b      	strh	r3, [r7, #10]
 8000a4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a56:	dbf4      	blt.n	8000a42 <RTC_setAlarmTime+0x6e>
	//write the alarm day to the RTC
	RTC_write(ALARM_DAY_ADDR, 0x81);
 8000a58:	2181      	movs	r1, #129	; 0x81
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f7ff fd0c 	bl	8000478 <RTC_write>
	for(int16_t i = 0; i < 1000; i++);
 8000a60:	2300      	movs	r3, #0
 8000a62:	813b      	strh	r3, [r7, #8]
 8000a64:	e005      	b.n	8000a72 <RTC_setAlarmTime+0x9e>
 8000a66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	813b      	strh	r3, [r7, #8]
 8000a72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7a:	dbf4      	blt.n	8000a66 <RTC_setAlarmTime+0x92>

}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <uint16ToString>:

uint16_t uint16ToString(uint16_t value, char *str){
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
    // Handle special case for 0
	for (uint8_t i = 0; i < 5; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	77fb      	strb	r3, [r7, #31]
 8000a98:	e007      	b.n	8000aaa <uint16ToString+0x22>
	        str[i] = '\0';
 8000a9a:	7ffb      	ldrb	r3, [r7, #31]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 5; i++) {
 8000aa4:	7ffb      	ldrb	r3, [r7, #31]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	77fb      	strb	r3, [r7, #31]
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d9f4      	bls.n	8000a9a <uint16ToString+0x12>
	}
    if (value == 0)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <uint16ToString+0x40>
    {
        str[0] = '0';
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2230      	movs	r2, #48	; 0x30
 8000aba:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
        return 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e04c      	b.n	8000b62 <uint16ToString+0xda>
    }

    // Convert the value to a string in reverse order
    uint16_t num = value;
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	83bb      	strh	r3, [r7, #28]
    int i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    while (num != 0)
 8000ad0:	e01b      	b.n	8000b0a <uint16ToString+0x82>
    {
        uint16_t remainder = num % 10;
 8000ad2:	8bba      	ldrh	r2, [r7, #28]
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <uint16ToString+0xe8>)
 8000ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ada:	08d9      	lsrs	r1, r3, #3
 8000adc:	460b      	mov	r3, r1
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	81bb      	strh	r3, [r7, #12]
        str[i++] = '0' + remainder;
 8000ae8:	89bb      	ldrh	r3, [r7, #12]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	61b9      	str	r1, [r7, #24]
 8000af2:	4619      	mov	r1, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	440b      	add	r3, r1
 8000af8:	3230      	adds	r2, #48	; 0x30
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	701a      	strb	r2, [r3, #0]
        num /= 10;
 8000afe:	8bbb      	ldrh	r3, [r7, #28]
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <uint16ToString+0xe8>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	83bb      	strh	r3, [r7, #28]
    while (num != 0)
 8000b0a:	8bbb      	ldrh	r3, [r7, #28]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e0      	bne.n	8000ad2 <uint16ToString+0x4a>
    }

    // Reverse the string
    int j, len = i;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	613b      	str	r3, [r7, #16]
    for (i = 0, j = len - 1; i < j; i++, j--)
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e017      	b.n	8000b50 <uint16ToString+0xc8>
    {
        char temp = str[i];
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	73fb      	strb	r3, [r7, #15]
        str[i] = str[j];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	441a      	add	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	440b      	add	r3, r1
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = len - 1; i < j; i++, j--)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	3301      	adds	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbe3      	blt.n	8000b20 <uint16ToString+0x98>
    }

    // Add null terminator
    str[4] = '\0';
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

    return 1;
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	cccccccd 	.word	0xcccccccd

08000b74 <UART_init>:
#include "UART.h"
#include "stm32l476xx.h"
#include "string.h"

void UART_init(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	// configure UART settings
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // clock enable
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <UART_init+0x100>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <UART_init+0x100>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->BRR &= ~(CLEAR_BRR); // clear baud rate
 8000b84:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <UART_init+0x104>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <UART_init+0x104>)
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	041b      	lsls	r3, r3, #16
 8000b8e:	60d3      	str	r3, [r2, #12]
	USART2->BRR |= (SET_BRR); // set baud rate to 115.2 kbps
 8000b90:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <UART_init+0x104>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a38      	ldr	r2, [pc, #224]	; (8000c78 <UART_init+0x104>)
 8000b96:	f043 03d1 	orr.w	r3, r3, #209	; 0xd1
 8000b9a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_M); // 8 bit word length
 8000b9c:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <UART_init+0x104>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a35      	ldr	r2, [pc, #212]	; (8000c78 <UART_init+0x104>)
 8000ba2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000ba6:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR2_STOP); // 1 stop bit
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <UART_init+0x104>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <UART_init+0x104>)
 8000bae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bb2:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <UART_init+0x104>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <UART_init+0x104>)
 8000bba:	f023 030c 	bic.w	r3, r3, #12
 8000bbe:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE); // transmit enable
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <UART_init+0x104>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <UART_init+0x104>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_RE); // receive enable
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <UART_init+0x104>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <UART_init+0x104>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR1_OVER8); // oversampling by 16
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <UART_init+0x104>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <UART_init+0x104>)
 8000bde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000be2:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_RXNEIE); // enable receive interrupts
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <UART_init+0x104>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <UART_init+0x104>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_UE); // USART enable
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <UART_init+0x104>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <UART_init+0x104>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
	// set GPIO pins for USART transmit and receive
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // clock enable
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <UART_init+0x100>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <UART_init+0x100>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000c08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c16:	6013      	str	r3, [r2, #0]
       // AF mode
	GPIOA->MODER |= (2 << GPIO_MODER_MODE2_Pos | 2 << GPIO_MODER_MODE3_Pos);
 8000c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c22:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c26:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c36:	6213      	str	r3, [r2, #32]
       // USART2 AF select
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos | 7 << GPIO_AFRL_AFSEL3_Pos);
 8000c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c42:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c46:	6213      	str	r3, [r2, #32]
	GPIOA->OSPEEDR &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c56:	6093      	str	r3, [r2, #8]
       // very fast speed
	GPIOA->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED2_Pos | 3 << GPIO_OSPEEDR_OSPEED3_Pos); }
 8000c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c62:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000c66:	6093      	str	r3, [r2, #8]
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40004400 	.word	0x40004400

08000c7c <UART_print_char>:

void UART_print_char(char character)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	while (USART2->ISR & (USART_ISR_TXE == 0))
 8000c86:	bf00      	nop
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <UART_print_char+0x3c>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
	{
	}
	USART2->TDR = character;  // write data to transit register
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <UART_print_char+0x3c>)
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	b292      	uxth	r2, r2
 8000c92:	851a      	strh	r2, [r3, #40]	; 0x28
	for (int delay = 0; delay < 1000; delay++);
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e002      	b.n	8000ca0 <UART_print_char+0x24>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca6:	dbf8      	blt.n	8000c9a <UART_print_char+0x1e>
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400

08000cbc <UART_print>:

void UART_print(char* string)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	while (USART2->ISR & (USART_ISR_TXE == 0))
 8000cc4:	bf00      	nop
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <UART_print+0x6c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
	{
	}
	for (int i = 0; i < strlen(string) + 1; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e013      	b.n	8000cf8 <UART_print+0x3c>
	{
		UART_print_char(string[i]);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffcf 	bl	8000c7c <UART_print_char>
		for (int delay = 0; delay < 1000; delay++);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	e002      	b.n	8000cea <UART_print+0x2e>
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf0:	dbf8      	blt.n	8000ce4 <UART_print+0x28>
	for (int i = 0; i < strlen(string) + 1; i++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fa65 	bl	80001c8 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8e3      	bhi.n	8000cd0 <UART_print+0x14>
	}
	for (int delay = 0; delay < 1000; delay++);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e002      	b.n	8000d14 <UART_print+0x58>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1a:	dbf8      	blt.n	8000d0e <UART_print+0x52>
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400

08000d2c <main>:
uint8_t HexToDec(uint8_t data);
uint8_t DecToHex(uint8_t data);


int main(void)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	; 0x2c
 8000d30:	af04      	add	r7, sp, #16
  HAL_Init();
 8000d32:	f000 fbd0 	bl	80014d6 <HAL_Init>

  SystemClock_Config();
 8000d36:	f000 faf9 	bl	800132c <SystemClock_Config>

  //initialize I2C to be used for peripheral
  RTC_init();
 8000d3a:	f7ff fb37 	bl	80003ac <RTC_init>
  //initialize UART
  UART_init();
 8000d3e:	f7ff ff19 	bl	8000b74 <UART_init>
  //configure keypad
  keypad_config();
 8000d42:	f7ff fa49 	bl	80001d8 <keypad_config>
	  SET_TIME,
	  SET_ALARM
  }state_type;

  //holds current state
  state_type state = GET_KEY;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]
  //holds the keypress
  int8_t keypress;
  //FSM
  while (1)
  {
	  switch (state){
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	f200 82a4 	bhi.w	800129a <main+0x56e>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <main+0x2c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d75 	.word	0x08000d75
 8000d5c:	08000dcb 	.word	0x08000dcb
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000e59 	.word	0x08000e59
 8000d68:	08000f55 	.word	0x08000f55
 8000d6c:	08000f9d 	.word	0x08000f9d
 8000d70:	0800119d 	.word	0x0800119d
	  case GET_KEY:
		  //get key from keypad
		  keypress = keypad_getKey();
 8000d74:	f7ff fa76 	bl	8000264 <keypad_getKey>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73bb      	strb	r3, [r7, #14]

		  //if no keypressed
		  if(keypress == -1)
 8000d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d84:	d102      	bne.n	8000d8c <main+0x60>
			  state = DISPLAY_TIME;
 8000d86:	2301      	movs	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]

		  //else stay
		  else
			  state = GET_KEY;

		  break;
 8000d8a:	e288      	b.n	800129e <main+0x572>
		  else if(keypress == 10)
 8000d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d90:	2b0a      	cmp	r3, #10
 8000d92:	d102      	bne.n	8000d9a <main+0x6e>
			  state = SET_ALARM;
 8000d94:	2306      	movs	r3, #6
 8000d96:	75fb      	strb	r3, [r7, #23]
		  break;
 8000d98:	e281      	b.n	800129e <main+0x572>
		  else if(keypress == 11)
 8000d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d9e:	2b0b      	cmp	r3, #11
 8000da0:	d102      	bne.n	8000da8 <main+0x7c>
			  state = SET_TIME;
 8000da2:	2305      	movs	r3, #5
 8000da4:	75fb      	strb	r3, [r7, #23]
		  break;
 8000da6:	e27a      	b.n	800129e <main+0x572>
		  else if(keypress == 12)
 8000da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dac:	2b0c      	cmp	r3, #12
 8000dae:	d102      	bne.n	8000db6 <main+0x8a>
			  state = DISPLAY_CMDS;
 8000db0:	2302      	movs	r3, #2
 8000db2:	75fb      	strb	r3, [r7, #23]
		  break;
 8000db4:	e273      	b.n	800129e <main+0x572>
		  else if(keypress == 13)
 8000db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dba:	2b0d      	cmp	r3, #13
 8000dbc:	d102      	bne.n	8000dc4 <main+0x98>
			  state = DISPLAY_ALARM;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	75fb      	strb	r3, [r7, #23]
		  break;
 8000dc2:	e26c      	b.n	800129e <main+0x572>
			  state = GET_KEY;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
		  break;
 8000dc8:	e269      	b.n	800129e <main+0x572>

	  case DISPLAY_TIME:
		  //read and print the times from RTC
		  RTC_readTimes();
 8000dca:	f7ff fcd7 	bl	800077c <RTC_readTimes>

		  //read the contents of the status register
		  status = RTC_read(STATUS_REG);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff fbb0 	bl	8000534 <RTC_read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	72bb      	strb	r3, [r7, #10]
		  //if the Alarm1 flag is high is status register
		  if(status & 0x01)
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <main+0xbc>
			  //this means the alarm is going off
			  state = ALARM_INT;
 8000de2:	2304      	movs	r3, #4
 8000de4:	75fb      	strb	r3, [r7, #23]

		  //if it is not going off, stay
		  else
			  state = GET_KEY;
		  break;
 8000de6:	e25a      	b.n	800129e <main+0x572>
			  state = GET_KEY;
 8000de8:	2300      	movs	r3, #0
 8000dea:	75fb      	strb	r3, [r7, #23]
		  break;
 8000dec:	e257      	b.n	800129e <main+0x572>

	  case DISPLAY_CMDS:
		  //prints a list of possible commands to the alarm clock
		  //clear the screen and position cursor top left
		  UART_print("\033[2J\033[H");
 8000dee:	48c5      	ldr	r0, [pc, #788]	; (8001104 <main+0x3d8>)
 8000df0:	f7ff ff64 	bl	8000cbc <UART_print>
		  UART_print("CMDS: ");
 8000df4:	48c4      	ldr	r0, [pc, #784]	; (8001108 <main+0x3dc>)
 8000df6:	f7ff ff61 	bl	8000cbc <UART_print>
		  //move left and down a line
		  UART_print("\033[1B\033[10D");
 8000dfa:	48c4      	ldr	r0, [pc, #784]	; (800110c <main+0x3e0>)
 8000dfc:	f7ff ff5e 	bl	8000cbc <UART_print>
		  UART_print("Hold A to set an alarm");
 8000e00:	48c3      	ldr	r0, [pc, #780]	; (8001110 <main+0x3e4>)
 8000e02:	f7ff ff5b 	bl	8000cbc <UART_print>
		  //move left and down a line
		  UART_print("\033[1B\033[30D");
 8000e06:	48c3      	ldr	r0, [pc, #780]	; (8001114 <main+0x3e8>)
 8000e08:	f7ff ff58 	bl	8000cbc <UART_print>
		  UART_print("Hold B to set the current time");
 8000e0c:	48c2      	ldr	r0, [pc, #776]	; (8001118 <main+0x3ec>)
 8000e0e:	f7ff ff55 	bl	8000cbc <UART_print>
		  //move left and down a line
		  UART_print("\033[1B\033[30D");
 8000e12:	48c0      	ldr	r0, [pc, #768]	; (8001114 <main+0x3e8>)
 8000e14:	f7ff ff52 	bl	8000cbc <UART_print>
		  UART_print("Hold C to display commands");
 8000e18:	48c0      	ldr	r0, [pc, #768]	; (800111c <main+0x3f0>)
 8000e1a:	f7ff ff4f 	bl	8000cbc <UART_print>
		  //move left and down a line
		  UART_print("\033[1B\033[30D");
 8000e1e:	48bd      	ldr	r0, [pc, #756]	; (8001114 <main+0x3e8>)
 8000e20:	f7ff ff4c 	bl	8000cbc <UART_print>
		  UART_print("Hold D to display alarms");
 8000e24:	48be      	ldr	r0, [pc, #760]	; (8001120 <main+0x3f4>)
 8000e26:	f7ff ff49 	bl	8000cbc <UART_print>
		  //move left and down 2 lines
		  UART_print("\033[2B\033[30D");
 8000e2a:	48be      	ldr	r0, [pc, #760]	; (8001124 <main+0x3f8>)
 8000e2c:	f7ff ff46 	bl	8000cbc <UART_print>
		  UART_print("Press any key to return to clock and enter a new command");
 8000e30:	48bd      	ldr	r0, [pc, #756]	; (8001128 <main+0x3fc>)
 8000e32:	f7ff ff43 	bl	8000cbc <UART_print>

		  //wait for a key to be pressed
		  keypress = keypad_getKey();
 8000e36:	f7ff fa15 	bl	8000264 <keypad_getKey>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000e3e:	e003      	b.n	8000e48 <main+0x11c>
			  keypress = keypad_getKey();
 8000e40:	f7ff fa10 	bl	8000264 <keypad_getKey>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e50:	d0f6      	beq.n	8000e40 <main+0x114>
		  //once a key is pressed return to GET_KEY
		  state = GET_KEY;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]

		  break;
 8000e56:	e222      	b.n	800129e <main+0x572>

	  case DISPLAY_ALARM:
		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8000e58:	48aa      	ldr	r0, [pc, #680]	; (8001104 <main+0x3d8>)
 8000e5a:	f7ff ff2f 	bl	8000cbc <UART_print>

		  UART_print("Your Alarm is set to: ");
 8000e5e:	48b3      	ldr	r0, [pc, #716]	; (800112c <main+0x400>)
 8000e60:	f7ff ff2c 	bl	8000cbc <UART_print>
		  //move left and down a line
		  UART_print("\033[1B\033[30D");
 8000e64:	48ab      	ldr	r0, [pc, #684]	; (8001114 <main+0x3e8>)
 8000e66:	f7ff ff29 	bl	8000cbc <UART_print>

		  //display the current alarm hours set
		  data = RTC_read(ALARM_HOUR_ADDR);
 8000e6a:	2009      	movs	r0, #9
 8000e6c:	f7ff fb62 	bl	8000534 <RTC_read>
 8000e70:	4603      	mov	r3, r0
 8000e72:	72fb      	strb	r3, [r7, #11]
		  //check the PM bit in the ALARM1 Hours register
		  if(data & (1<<5))
 8000e74:	7afb      	ldrb	r3, [r7, #11]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <main+0x156>
			  PM = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
		  //convert number to decimal and clear settings bits
		  data = HexToDec(data & 0x1F);
 8000e82:	7afb      	ldrb	r3, [r7, #11]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fa12 	bl	80012b4 <HexToDec>
 8000e90:	4603      	mov	r3, r0
 8000e92:	72fb      	strb	r3, [r7, #11]
		  //convert to string and print
		  uint16ToString(data, result);
 8000e94:	7afb      	ldrb	r3, [r7, #11]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	1d3a      	adds	r2, r7, #4
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fdf3 	bl	8000a88 <uint16ToString>
		  UART_print(result);
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff09 	bl	8000cbc <UART_print>
		  UART_print(":");
 8000eaa:	48a1      	ldr	r0, [pc, #644]	; (8001130 <main+0x404>)
 8000eac:	f7ff ff06 	bl	8000cbc <UART_print>

		  //display the current alarm min set
		  data = RTC_read(ALARM_MIN_ADDR);
 8000eb0:	2008      	movs	r0, #8
 8000eb2:	f7ff fb3f 	bl	8000534 <RTC_read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	72fb      	strb	r3, [r7, #11]
		  //convert to decimal
		  data = HexToDec(data);
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f9f9 	bl	80012b4 <HexToDec>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	72fb      	strb	r3, [r7, #11]
		  //convert to string and print
		  uint16ToString(data, result);
 8000ec6:	7afb      	ldrb	r3, [r7, #11]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	1d3a      	adds	r2, r7, #4
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fdda 	bl	8000a88 <uint16ToString>
		  UART_print(result);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fef0 	bl	8000cbc <UART_print>
		  UART_print(":");
 8000edc:	4894      	ldr	r0, [pc, #592]	; (8001130 <main+0x404>)
 8000ede:	f7ff feed 	bl	8000cbc <UART_print>


		  //display the current alarm sec set
		  data = RTC_read(ALARM_SEC_ADDR);
 8000ee2:	2007      	movs	r0, #7
 8000ee4:	f7ff fb26 	bl	8000534 <RTC_read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	72fb      	strb	r3, [r7, #11]
		  //convert tp decimal
		  data = HexToDec(data);
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f9e0 	bl	80012b4 <HexToDec>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	72fb      	strb	r3, [r7, #11]
		  //convert to string
		  uint16ToString(data, result);
 8000ef8:	7afb      	ldrb	r3, [r7, #11]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	1d3a      	adds	r2, r7, #4
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fdc1 	bl	8000a88 <uint16ToString>
		  //print
		  UART_print(result);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fed7 	bl	8000cbc <UART_print>

		  //print AM or PM
		  if(PM)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <main+0x1f0>
			  UART_print(" PM");
 8000f14:	4887      	ldr	r0, [pc, #540]	; (8001134 <main+0x408>)
 8000f16:	f7ff fed1 	bl	8000cbc <UART_print>
 8000f1a:	e002      	b.n	8000f22 <main+0x1f6>
		  else
			  UART_print(" AM");
 8000f1c:	4886      	ldr	r0, [pc, #536]	; (8001138 <main+0x40c>)
 8000f1e:	f7ff fecd 	bl	8000cbc <UART_print>

		  //move cursor down 2 lines and left
		  UART_print("\033[2B\033[20D");
 8000f22:	4886      	ldr	r0, [pc, #536]	; (800113c <main+0x410>)
 8000f24:	f7ff feca 	bl	8000cbc <UART_print>
		  UART_print("Press any key to return to clock and enter a new command");
 8000f28:	487f      	ldr	r0, [pc, #508]	; (8001128 <main+0x3fc>)
 8000f2a:	f7ff fec7 	bl	8000cbc <UART_print>
		  //wait for a key to be pressed
		  keypress = keypad_getKey();
 8000f2e:	f7ff f999 	bl	8000264 <keypad_getKey>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000f36:	e003      	b.n	8000f40 <main+0x214>
			  keypress = keypad_getKey();
 8000f38:	f7ff f994 	bl	8000264 <keypad_getKey>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f48:	d0f6      	beq.n	8000f38 <main+0x20c>

		  //reset PM
		  PM = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]

		  //once a key is pressed return to GET_KEY
		  state = GET_KEY;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	75fb      	strb	r3, [r7, #23]

		  break;
 8000f52:	e1a4      	b.n	800129e <main+0x572>

	  case ALARM_INT:
		  //clear screen, reposition cursor, turn on bold text
		  UART_print("\033[2J\033[H\033[1m");
 8000f54:	487a      	ldr	r0, [pc, #488]	; (8001140 <main+0x414>)
 8000f56:	f7ff feb1 	bl	8000cbc <UART_print>
		  //print message
		  UART_print("WAKE UP!!!!! ");
 8000f5a:	487a      	ldr	r0, [pc, #488]	; (8001144 <main+0x418>)
 8000f5c:	f7ff feae 	bl	8000cbc <UART_print>
		  //move cursor down a line and left
		  UART_print("\033[1B\033[30D");
 8000f60:	486c      	ldr	r0, [pc, #432]	; (8001114 <main+0x3e8>)
 8000f62:	f7ff feab 	bl	8000cbc <UART_print>
		  UART_print("Press any key to turn off alarm and return to clock screen.");
 8000f66:	4878      	ldr	r0, [pc, #480]	; (8001148 <main+0x41c>)
 8000f68:	f7ff fea8 	bl	8000cbc <UART_print>
		  //turn off bold text
		  UART_print("\033[0m");
 8000f6c:	4877      	ldr	r0, [pc, #476]	; (800114c <main+0x420>)
 8000f6e:	f7ff fea5 	bl	8000cbc <UART_print>

		  //wait for a key to be pressed
		  keypress = keypad_getKey();
 8000f72:	f7ff f977 	bl	8000264 <keypad_getKey>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000f7a:	e003      	b.n	8000f84 <main+0x258>
			  keypress = keypad_getKey();
 8000f7c:	f7ff f972 	bl	8000264 <keypad_getKey>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73bb      	strb	r3, [r7, #14]
		  while(keypress == -1)
 8000f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f8c:	d0f6      	beq.n	8000f7c <main+0x250>

		  //clear the ALARM flag
		  RTC_write(STATUS_REG, 0x00);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff fa71 	bl	8000478 <RTC_write>

		  //once a key is pressed return to GET_KEY
		  state = GET_KEY;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]

		  break;
 8000f9a:	e180      	b.n	800129e <main+0x572>

	  case SET_TIME:
		  //clear screen, reposition cursor
		  UART_print("\033[2J\033[H");
 8000f9c:	4859      	ldr	r0, [pc, #356]	; (8001104 <main+0x3d8>)
 8000f9e:	f7ff fe8d 	bl	8000cbc <UART_print>

		  //input seconds
		  UART_print("Enter the current seconds (00-59)");
 8000fa2:	486b      	ldr	r0, [pc, #428]	; (8001150 <main+0x424>)
 8000fa4:	f7ff fe8a 	bl	8000cbc <UART_print>
		  sec = keypad_input();
 8000fa8:	f7ff f9bc 	bl	8000324 <keypad_input>
 8000fac:	4603      	mov	r3, r0
 8000fae:	75bb      	strb	r3, [r7, #22]
		  if(sec > 59)
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	2b3b      	cmp	r3, #59	; 0x3b
 8000fb4:	d901      	bls.n	8000fba <main+0x28e>
			  sec = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75bb      	strb	r3, [r7, #22]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8000fba:	4852      	ldr	r0, [pc, #328]	; (8001104 <main+0x3d8>)
 8000fbc:	f7ff fe7e 	bl	8000cbc <UART_print>
		  //input the minutes
		  UART_print("Enter the current minutes (00-59)");
 8000fc0:	4864      	ldr	r0, [pc, #400]	; (8001154 <main+0x428>)
 8000fc2:	f7ff fe7b 	bl	8000cbc <UART_print>
		  min = keypad_input();
 8000fc6:	f7ff f9ad 	bl	8000324 <keypad_input>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	757b      	strb	r3, [r7, #21]
		  if(min > 59)
 8000fce:	7d7b      	ldrb	r3, [r7, #21]
 8000fd0:	2b3b      	cmp	r3, #59	; 0x3b
 8000fd2:	d901      	bls.n	8000fd8 <main+0x2ac>
			  min = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	757b      	strb	r3, [r7, #21]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8000fd8:	484a      	ldr	r0, [pc, #296]	; (8001104 <main+0x3d8>)
 8000fda:	f7ff fe6f 	bl	8000cbc <UART_print>
		  //input the hours
		  UART_print("Enter the current hours (00-12)");
 8000fde:	485e      	ldr	r0, [pc, #376]	; (8001158 <main+0x42c>)
 8000fe0:	f7ff fe6c 	bl	8000cbc <UART_print>
		  hour = keypad_input();
 8000fe4:	f7ff f99e 	bl	8000324 <keypad_input>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	753b      	strb	r3, [r7, #20]
		  if(hour > 12)
 8000fec:	7d3b      	ldrb	r3, [r7, #20]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d901      	bls.n	8000ff6 <main+0x2ca>
			  hour = 12;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	753b      	strb	r3, [r7, #20]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8000ff6:	4843      	ldr	r0, [pc, #268]	; (8001104 <main+0x3d8>)
 8000ff8:	f7ff fe60 	bl	8000cbc <UART_print>
		  //input AM or PM
		  UART_print("01 for AM, 02 for PM");
 8000ffc:	4857      	ldr	r0, [pc, #348]	; (800115c <main+0x430>)
 8000ffe:	f7ff fe5d 	bl	8000cbc <UART_print>
		  PM = keypad_input();
 8001002:	f7ff f98f 	bl	8000324 <keypad_input>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
		  //adjust for register setting
		  if(PM == 2)
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d102      	bne.n	8001016 <main+0x2ea>
			  PM = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <main+0x2ee>
		  else
			  PM = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 800101a:	483a      	ldr	r0, [pc, #232]	; (8001104 <main+0x3d8>)
 800101c:	f7ff fe4e 	bl	8000cbc <UART_print>
		  //input the day
		  UART_print("Enter the day (01-07): 01 for Sunday");
 8001020:	484f      	ldr	r0, [pc, #316]	; (8001160 <main+0x434>)
 8001022:	f7ff fe4b 	bl	8000cbc <UART_print>
		  day = keypad_input();
 8001026:	f7ff f97d 	bl	8000324 <keypad_input>
 800102a:	4603      	mov	r3, r0
 800102c:	74fb      	strb	r3, [r7, #19]
		  if(day > 7)
 800102e:	7cfb      	ldrb	r3, [r7, #19]
 8001030:	2b07      	cmp	r3, #7
 8001032:	d901      	bls.n	8001038 <main+0x30c>
			  day = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	74fb      	strb	r3, [r7, #19]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8001038:	4832      	ldr	r0, [pc, #200]	; (8001104 <main+0x3d8>)
 800103a:	f7ff fe3f 	bl	8000cbc <UART_print>
		  //input the date
		  UART_print("Enter the current date (00-31)");
 800103e:	4849      	ldr	r0, [pc, #292]	; (8001164 <main+0x438>)
 8001040:	f7ff fe3c 	bl	8000cbc <UART_print>
		  date = keypad_input();
 8001044:	f7ff f96e 	bl	8000324 <keypad_input>
 8001048:	4603      	mov	r3, r0
 800104a:	74bb      	strb	r3, [r7, #18]
		  if(date > 31 || date < 1)
 800104c:	7cbb      	ldrb	r3, [r7, #18]
 800104e:	2b1f      	cmp	r3, #31
 8001050:	d802      	bhi.n	8001058 <main+0x32c>
 8001052:	7cbb      	ldrb	r3, [r7, #18]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <main+0x330>
			  date = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	74bb      	strb	r3, [r7, #18]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 800105c:	4829      	ldr	r0, [pc, #164]	; (8001104 <main+0x3d8>)
 800105e:	f7ff fe2d 	bl	8000cbc <UART_print>
		  //input the month
		  UART_print("Enter the current month (01-12)");
 8001062:	4841      	ldr	r0, [pc, #260]	; (8001168 <main+0x43c>)
 8001064:	f7ff fe2a 	bl	8000cbc <UART_print>
		  month = keypad_input();
 8001068:	f7ff f95c 	bl	8000324 <keypad_input>
 800106c:	4603      	mov	r3, r0
 800106e:	747b      	strb	r3, [r7, #17]
		  if(month > 12 || month < 1)
 8001070:	7c7b      	ldrb	r3, [r7, #17]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	d802      	bhi.n	800107c <main+0x350>
 8001076:	7c7b      	ldrb	r3, [r7, #17]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <main+0x354>
			  month = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	747b      	strb	r3, [r7, #17]

		  //clear screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <main+0x3d8>)
 8001082:	f7ff fe1b 	bl	8000cbc <UART_print>
		  //input the year
		  UART_print("Enter the current year (00-99)");
 8001086:	4839      	ldr	r0, [pc, #228]	; (800116c <main+0x440>)
 8001088:	f7ff fe18 	bl	8000cbc <UART_print>
		  year = keypad_input();
 800108c:	f7ff f94a 	bl	8000324 <keypad_input>
 8001090:	4603      	mov	r3, r0
 8001092:	743b      	strb	r3, [r7, #16]
		  if(year > 99)
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	2b63      	cmp	r3, #99	; 0x63
 8001098:	d901      	bls.n	800109e <main+0x372>
			  year = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	743b      	strb	r3, [r7, #16]

		  //convert times to HEX
		  sec = DecToHex(sec);
 800109e:	7dbb      	ldrb	r3, [r7, #22]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f921 	bl	80012e8 <DecToHex>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75bb      	strb	r3, [r7, #22]
		  min = DecToHex(min);
 80010aa:	7d7b      	ldrb	r3, [r7, #21]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f91b 	bl	80012e8 <DecToHex>
 80010b2:	4603      	mov	r3, r0
 80010b4:	757b      	strb	r3, [r7, #21]
		  hour = DecToHex(hour);
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f915 	bl	80012e8 <DecToHex>
 80010be:	4603      	mov	r3, r0
 80010c0:	753b      	strb	r3, [r7, #20]
		  day = DecToHex(day);
 80010c2:	7cfb      	ldrb	r3, [r7, #19]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f90f 	bl	80012e8 <DecToHex>
 80010ca:	4603      	mov	r3, r0
 80010cc:	74fb      	strb	r3, [r7, #19]
		  date = DecToHex(date);
 80010ce:	7cbb      	ldrb	r3, [r7, #18]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f909 	bl	80012e8 <DecToHex>
 80010d6:	4603      	mov	r3, r0
 80010d8:	74bb      	strb	r3, [r7, #18]
		  month = DecToHex(month);
 80010da:	7c7b      	ldrb	r3, [r7, #17]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f903 	bl	80012e8 <DecToHex>
 80010e2:	4603      	mov	r3, r0
 80010e4:	747b      	strb	r3, [r7, #17]
		  year = DecToHex(year);
 80010e6:	7c3b      	ldrb	r3, [r7, #16]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f8fd 	bl	80012e8 <DecToHex>
 80010ee:	4603      	mov	r3, r0
 80010f0:	743b      	strb	r3, [r7, #16]

		  //configure the hour register settings
		  if(PM)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d03b      	beq.n	8001170 <main+0x444>
			  hour |= 0x60;
 80010f8:	7d3b      	ldrb	r3, [r7, #20]
 80010fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010fe:	753b      	strb	r3, [r7, #20]
 8001100:	e03a      	b.n	8001178 <main+0x44c>
 8001102:	bf00      	nop
 8001104:	080024f4 	.word	0x080024f4
 8001108:	080024fc 	.word	0x080024fc
 800110c:	08002504 	.word	0x08002504
 8001110:	08002510 	.word	0x08002510
 8001114:	08002528 	.word	0x08002528
 8001118:	08002534 	.word	0x08002534
 800111c:	08002554 	.word	0x08002554
 8001120:	08002570 	.word	0x08002570
 8001124:	0800258c 	.word	0x0800258c
 8001128:	08002598 	.word	0x08002598
 800112c:	080025d4 	.word	0x080025d4
 8001130:	080025ec 	.word	0x080025ec
 8001134:	080025f0 	.word	0x080025f0
 8001138:	080025f4 	.word	0x080025f4
 800113c:	080025f8 	.word	0x080025f8
 8001140:	08002604 	.word	0x08002604
 8001144:	08002610 	.word	0x08002610
 8001148:	08002620 	.word	0x08002620
 800114c:	0800265c 	.word	0x0800265c
 8001150:	08002664 	.word	0x08002664
 8001154:	08002688 	.word	0x08002688
 8001158:	080026ac 	.word	0x080026ac
 800115c:	080026cc 	.word	0x080026cc
 8001160:	080026e4 	.word	0x080026e4
 8001164:	0800270c 	.word	0x0800270c
 8001168:	0800272c 	.word	0x0800272c
 800116c:	0800274c 	.word	0x0800274c
		  else
			  hour |= 0x40;
 8001170:	7d3b      	ldrb	r3, [r7, #20]
 8001172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001176:	753b      	strb	r3, [r7, #20]

		  //set the times to the RTC
		  RTC_setTime(sec, min, hour, day, date, month, year);
 8001178:	7cfc      	ldrb	r4, [r7, #19]
 800117a:	7d3a      	ldrb	r2, [r7, #20]
 800117c:	7d79      	ldrb	r1, [r7, #21]
 800117e:	7db8      	ldrb	r0, [r7, #22]
 8001180:	7c3b      	ldrb	r3, [r7, #16]
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	7c7b      	ldrb	r3, [r7, #17]
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4623      	mov	r3, r4
 800118e:	f7ff fa59 	bl	8000644 <RTC_setTime>

		  //reset PM
		  PM = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

		  //get a new cmd
		  state = GET_KEY;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]

		  break;
 800119a:	e080      	b.n	800129e <main+0x572>

	  case SET_ALARM:

		  //Turn on INTCN and A1E in control register
		  RTC_write(CONTROL_REG, 0x05);
 800119c:	2105      	movs	r1, #5
 800119e:	200e      	movs	r0, #14
 80011a0:	f7ff f96a 	bl	8000478 <RTC_write>
		  //delay for writes
		  for(int16_t i = 0; i < 10000; i++);
 80011a4:	2300      	movs	r3, #0
 80011a6:	81bb      	strh	r3, [r7, #12]
 80011a8:	e005      	b.n	80011b6 <main+0x48a>
 80011aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	81bb      	strh	r3, [r7, #12]
 80011b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80011be:	4293      	cmp	r3, r2
 80011c0:	ddf3      	ble.n	80011aa <main+0x47e>
		  //clear alarm flag
		  RTC_write(STATUS_REG, 0x00);
 80011c2:	2100      	movs	r1, #0
 80011c4:	200f      	movs	r0, #15
 80011c6:	f7ff f957 	bl	8000478 <RTC_write>

		  //clear the screen and reposition cursor
		  UART_print("\033[2J\033[H");
 80011ca:	4835      	ldr	r0, [pc, #212]	; (80012a0 <main+0x574>)
 80011cc:	f7ff fd76 	bl	8000cbc <UART_print>

		  //input the alarm seconds
		  UART_print("Enter the alarm seconds (00-59)");
 80011d0:	4834      	ldr	r0, [pc, #208]	; (80012a4 <main+0x578>)
 80011d2:	f7ff fd73 	bl	8000cbc <UART_print>
		  sec = keypad_input();
 80011d6:	f7ff f8a5 	bl	8000324 <keypad_input>
 80011da:	4603      	mov	r3, r0
 80011dc:	75bb      	strb	r3, [r7, #22]
		  if(sec > 59)
 80011de:	7dbb      	ldrb	r3, [r7, #22]
 80011e0:	2b3b      	cmp	r3, #59	; 0x3b
 80011e2:	d901      	bls.n	80011e8 <main+0x4bc>
			  sec = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75bb      	strb	r3, [r7, #22]

		  //clear the screen and reposition cursor
		  UART_print("\033[2J\033[H");
 80011e8:	482d      	ldr	r0, [pc, #180]	; (80012a0 <main+0x574>)
 80011ea:	f7ff fd67 	bl	8000cbc <UART_print>
		  //input the alarm minutes
		  UART_print("Enter the alarm minutes (00-59)");
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <main+0x57c>)
 80011f0:	f7ff fd64 	bl	8000cbc <UART_print>
		  min = keypad_input();
 80011f4:	f7ff f896 	bl	8000324 <keypad_input>
 80011f8:	4603      	mov	r3, r0
 80011fa:	757b      	strb	r3, [r7, #21]
		  if(min > 59)
 80011fc:	7d7b      	ldrb	r3, [r7, #21]
 80011fe:	2b3b      	cmp	r3, #59	; 0x3b
 8001200:	d901      	bls.n	8001206 <main+0x4da>
			  min = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	757b      	strb	r3, [r7, #21]

		  //clear the screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8001206:	4826      	ldr	r0, [pc, #152]	; (80012a0 <main+0x574>)
 8001208:	f7ff fd58 	bl	8000cbc <UART_print>
		  //input the alarm hours
		  UART_print("Enter the alarm hours (00-12)");
 800120c:	4827      	ldr	r0, [pc, #156]	; (80012ac <main+0x580>)
 800120e:	f7ff fd55 	bl	8000cbc <UART_print>
		  hour = keypad_input();
 8001212:	f7ff f887 	bl	8000324 <keypad_input>
 8001216:	4603      	mov	r3, r0
 8001218:	753b      	strb	r3, [r7, #20]
		  if(hour > 12)
 800121a:	7d3b      	ldrb	r3, [r7, #20]
 800121c:	2b0c      	cmp	r3, #12
 800121e:	d901      	bls.n	8001224 <main+0x4f8>
			  hour = 12;
 8001220:	230c      	movs	r3, #12
 8001222:	753b      	strb	r3, [r7, #20]

		  //clear the screen and reposition cursor
		  UART_print("\033[2J\033[H");
 8001224:	481e      	ldr	r0, [pc, #120]	; (80012a0 <main+0x574>)
 8001226:	f7ff fd49 	bl	8000cbc <UART_print>
		  UART_print("01 for AM, 02 for PM");
 800122a:	4821      	ldr	r0, [pc, #132]	; (80012b0 <main+0x584>)
 800122c:	f7ff fd46 	bl	8000cbc <UART_print>
		  PM = keypad_input();
 8001230:	f7ff f878 	bl	8000324 <keypad_input>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
		  if(PM == 2)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d102      	bne.n	8001244 <main+0x518>
			  PM = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e001      	b.n	8001248 <main+0x51c>
		  else
			  PM = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

		  //convert times to HEX
		  sec = DecToHex(sec);
 8001248:	7dbb      	ldrb	r3, [r7, #22]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f84c 	bl	80012e8 <DecToHex>
 8001250:	4603      	mov	r3, r0
 8001252:	75bb      	strb	r3, [r7, #22]
		  min = DecToHex(min);
 8001254:	7d7b      	ldrb	r3, [r7, #21]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f846 	bl	80012e8 <DecToHex>
 800125c:	4603      	mov	r3, r0
 800125e:	757b      	strb	r3, [r7, #21]
		  hour = DecToHex(hour);
 8001260:	7d3b      	ldrb	r3, [r7, #20]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f840 	bl	80012e8 <DecToHex>
 8001268:	4603      	mov	r3, r0
 800126a:	753b      	strb	r3, [r7, #20]

		  //configure the hour
		  if(PM)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <main+0x550>
			  hour |= 0x60;
 8001272:	7d3b      	ldrb	r3, [r7, #20]
 8001274:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001278:	753b      	strb	r3, [r7, #20]
 800127a:	e003      	b.n	8001284 <main+0x558>
		  else
			  hour |= 0x40;
 800127c:	7d3b      	ldrb	r3, [r7, #20]
 800127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001282:	753b      	strb	r3, [r7, #20]


		  //RTC_config();
		  RTC_setAlarmTime(sec, min, hour);
 8001284:	7d3a      	ldrb	r2, [r7, #20]
 8001286:	7d79      	ldrb	r1, [r7, #21]
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fba2 	bl	80009d4 <RTC_setAlarmTime>

		  //reset PM
		  PM = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

		  //get a new cmd
		  state = GET_KEY;
 8001294:	2300      	movs	r3, #0
 8001296:	75fb      	strb	r3, [r7, #23]

		  break;
 8001298:	e001      	b.n	800129e <main+0x572>

	  default:
		  state = DISPLAY_TIME;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
	  switch (state){
 800129e:	e554      	b.n	8000d4a <main+0x1e>
 80012a0:	080024f4 	.word	0x080024f4
 80012a4:	0800276c 	.word	0x0800276c
 80012a8:	0800278c 	.word	0x0800278c
 80012ac:	080027ac 	.word	0x080027ac
 80012b0:	080026cc 	.word	0x080026cc

080012b4 <HexToDec>:
  }

}


uint8_t HexToDec(uint8_t data){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	return ((data / 16 * 10) + (data % 16));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <DecToHex>:
uint8_t DecToHex(uint8_t data){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	return ((data / 10 * 16) + (data % 10));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <DecToHex+0x40>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	b2d8      	uxtb	r0, r3
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <DecToHex+0x40>)
 8001306:	fba3 1302 	umull	r1, r3, r3, r2
 800130a:	08d9      	lsrs	r1, r3, #3
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4403      	add	r3, r0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	cccccccd 	.word	0xcccccccd

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b096      	sub	sp, #88	; 0x58
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2244      	movs	r2, #68	; 0x44
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f876 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800134e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001352:	f000 fa29 	bl	80017a8 <HAL_PWREx_ControlVoltageScaling>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800135c:	f000 f82c 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001360:	2310      	movs	r3, #16
 8001362:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800136c:	2390      	movs	r3, #144	; 0x90
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa6b 	bl	8001854 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001384:	f000 f818 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2101      	movs	r1, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fe33 	bl	800200c <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013ac:	f000 f804 	bl	80013b8 <Error_Handler>
  }
}
 80013b0:	bf00      	nop
 80013b2:	3758      	adds	r7, #88	; 0x58
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6613      	str	r3, [r2, #96]	; 0x60
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f892 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff ffea 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f000 ff97 	bl	80023e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fc39 	bl	8000d2c <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014c8:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 80014cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d0:	2000002c 	.word	0x2000002c

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>

080014d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f91f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 f80e 	bl	8001508 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e001      	b.n	80014fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f8:	f7ff ff64 	bl	80013c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d023      	beq.n	8001564 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_InitTick+0x70>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_InitTick+0x6c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f91d 	bl	8001772 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d809      	bhi.n	8001558 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800154c:	f000 f8f5 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_InitTick+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e007      	b.n	8001568 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e004      	b.n	8001568 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e001      	b.n	8001568 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000028 	.word	0x20000028

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000028 	.word	0x20000028

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff5c 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffb0 	bl	80016e0 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40007000 	.word	0x40007000

080017a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b6:	d130      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d038      	beq.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ce:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2232      	movs	r2, #50	; 0x32
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0c9b      	lsrs	r3, r3, #18
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ec:	e002      	b.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001800:	d102      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f2      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001814:	d110      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e00f      	b.n	800183a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d007      	beq.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40007000 	.word	0x40007000
 800184c:	20000000 	.word	0x20000000
 8001850:	431bde83 	.word	0x431bde83

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e3ca      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001866:	4b97      	ldr	r3, [pc, #604]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80e4 	beq.w	8001a50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_RCC_OscConfig+0x4a>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b0c      	cmp	r3, #12
 8001892:	f040 808b 	bne.w	80019ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b01      	cmp	r3, #1
 800189a:	f040 8087 	bne.w	80019ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x62>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e3a2      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <HAL_RCC_OscConfig+0x7c>
 80018c6:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ce:	e005      	b.n	80018dc <HAL_RCC_OscConfig+0x88>
 80018d0:	4b7c      	ldr	r3, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018dc:	4293      	cmp	r3, r2
 80018de:	d223      	bcs.n	8001928 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fd1d 	bl	8002324 <RCC_SetFlashLatencyFromMSIRange>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e383      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f4:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	496d      	ldr	r1, [pc, #436]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001912:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	4968      	ldr	r1, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
 8001926:	e025      	b.n	8001974 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001928:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a65      	ldr	r2, [pc, #404]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4960      	ldr	r1, [pc, #384]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	495b      	ldr	r1, [pc, #364]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d109      	bne.n	8001974 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fcdd 	bl	8002324 <RCC_SetFlashLatencyFromMSIRange>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e343      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001974:	f000 fc4a 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	4950      	ldr	r1, [pc, #320]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_RCC_OscConfig+0x278>)
 8001992:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_RCC_OscConfig+0x27c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fdb5 	bl	8001508 <HAL_InitTick>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d052      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	e327      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d032      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a42      	ldr	r2, [pc, #264]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fdf2 	bl	80015a8 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c8:	f7ff fdee 	bl	80015a8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e310      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a36      	ldr	r2, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4931      	ldr	r1, [pc, #196]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	492c      	ldr	r1, [pc, #176]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e01a      	b.n	8001a50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fdbf 	bl	80015a8 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fdbb 	bl	80015a8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e2dd      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x1da>
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d074      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x21a>
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d10e      	bne.n	8001a86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d10b      	bne.n	8001a86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d064      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d160      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e2ba      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x24a>
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e026      	b.n	8001aec <HAL_RCC_OscConfig+0x298>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa6:	d115      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x280>
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a02      	ldr	r2, [pc, #8]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e014      	b.n	8001aec <HAL_RCC_OscConfig+0x298>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	080027dc 	.word	0x080027dc
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	4ba0      	ldr	r3, [pc, #640]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a9f      	ldr	r2, [pc, #636]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b9d      	ldr	r3, [pc, #628]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a9c      	ldr	r2, [pc, #624]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fd58 	bl	80015a8 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fd54 	bl	80015a8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e276      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x2a8>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fd44 	bl	80015a8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fd40 	bl	80015a8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e262      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b36:	4b88      	ldr	r3, [pc, #544]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2d0>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d060      	beq.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x310>
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d119      	bne.n	8001b92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d116      	bne.n	8001b92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_OscConfig+0x328>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e23f      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	4973      	ldr	r1, [pc, #460]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b90:	e040      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d023      	beq.n	8001be2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6e      	ldr	r2, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fcff 	bl	80015a8 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fcfb 	bl	80015a8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e21d      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	495f      	ldr	r1, [pc, #380]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	e018      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff fcdb 	bl	80015a8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fcd7 	bl	80015a8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1f9      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d03c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff fcb6 	bl	80015a8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff fcb2 	bl	80015a8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1d4      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ef      	beq.n	8001c40 <HAL_RCC_OscConfig+0x3ec>
 8001c60:	e01b      	b.n	8001c9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	4a3b      	ldr	r2, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7ff fc99 	bl	80015a8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fc95 	bl	80015a8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1b7      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ef      	bne.n	8001c7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80a6 	beq.w	8001df4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_RCC_OscConfig+0x508>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d118      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_OscConfig+0x508>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x508>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fc5c 	bl	80015a8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7ff fc58 	bl	80015a8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e17a      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x508>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4d8>
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2a:	e029      	b.n	8001d80 <HAL_RCC_OscConfig+0x52c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d115      	bne.n	8001d60 <HAL_RCC_OscConfig+0x50c>
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x52c>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	4b9c      	ldr	r3, [pc, #624]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	4a9b      	ldr	r2, [pc, #620]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d70:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a97      	ldr	r2, [pc, #604]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d016      	beq.n	8001db6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fc0e 	bl	80015a8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fc0a 	bl	80015a8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e12a      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ed      	beq.n	8001d90 <HAL_RCC_OscConfig+0x53c>
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff fbf7 	bl	80015a8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff fbf3 	bl	80015a8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e113      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd4:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ed      	bne.n	8001dbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de8:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	4a79      	ldr	r2, [pc, #484]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80fe 	beq.w	8001ffa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	f040 80d0 	bne.w	8001fa8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e08:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d130      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	3b01      	subs	r3, #1
 8001e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d127      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d11f      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e48:	2a07      	cmp	r2, #7
 8001e4a:	bf14      	ite	ne
 8001e4c:	2201      	movne	r2, #1
 8001e4e:	2200      	moveq	r2, #0
 8001e50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d113      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d06e      	beq.n	8001f5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d069      	beq.n	8001f58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0ad      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eac:	f7ff fb7c 	bl	80015a8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff fb78 	bl	80015a8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e09a      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x784>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	4311      	orrs	r1, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eec:	0212      	lsls	r2, r2, #8
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef4:	0852      	lsrs	r2, r2, #1
 8001ef6:	3a01      	subs	r2, #1
 8001ef8:	0552      	lsls	r2, r2, #21
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f00:	0852      	lsrs	r2, r2, #1
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0652      	lsls	r2, r2, #25
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f0c:	0912      	lsrs	r2, r2, #4
 8001f0e:	0452      	lsls	r2, r2, #17
 8001f10:	430a      	orrs	r2, r1
 8001f12:	4930      	ldr	r1, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f30:	f7ff fb3a 	bl	80015a8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fb36 	bl	80015a8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e058      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f56:	e050      	b.n	8001ffa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e04f      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d148      	bne.n	8001ffa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f80:	f7ff fb12 	bl	80015a8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fb0e 	bl	80015a8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e030      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x734>
 8001fa6:	e028      	b.n	8001ffa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d023      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff faf5 	bl	80015a8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc0:	e00c      	b.n	8001fdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff faf1 	bl	80015a8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d905      	bls.n	8001fdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e013      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_OscConfig+0x7b0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ec      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x7b0>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4905      	ldr	r1, [pc, #20]	; (8002004 <HAL_RCC_OscConfig+0x7b0>)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_OscConfig+0x7b4>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
 8001ff4:	e001      	b.n	8001ffa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	feeefffc 	.word	0xfeeefffc

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0e7      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b75      	ldr	r3, [pc, #468]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4970      	ldr	r1, [pc, #448]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b6e      	ldr	r3, [pc, #440]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cf      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002068:	429a      	cmp	r2, r3
 800206a:	d908      	bls.n	800207e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4960      	ldr	r1, [pc, #384]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d04c      	beq.n	8002124 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d121      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0a6      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09a      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c2:	4b4e      	ldr	r3, [pc, #312]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e08e      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e086      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4943      	ldr	r1, [pc, #268]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7ff fa58 	bl	80015a8 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff fa54 	bl	80015a8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e06e      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	429a      	cmp	r2, r3
 800213e:	d208      	bcs.n	8002152 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	492b      	ldr	r1, [pc, #172]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d210      	bcs.n	8002182 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 0207 	bic.w	r2, r3, #7
 8002168:	4923      	ldr	r1, [pc, #140]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e036      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4918      	ldr	r1, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4910      	ldr	r1, [pc, #64]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c0:	f000 f824 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	490b      	ldr	r1, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1f4>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1fc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f98f 	bl	8001508 <HAL_InitTick>
 80021ea:	4603      	mov	r3, r0
 80021ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ee:	7afb      	ldrb	r3, [r7, #11]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	080027dc 	.word	0x080027dc
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002224:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d121      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d11e      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e005      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_RCC_GetSysClockFreq+0x10c>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d102      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_GetSysClockFreq+0x110>)
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e004      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d101      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_RCC_GetSysClockFreq+0x114>)
 8002292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d134      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d003      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0xac>
 80022b0:	e005      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_RCC_GetSysClockFreq+0x110>)
 80022b4:	617b      	str	r3, [r7, #20]
      break;
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ba:	617b      	str	r3, [r7, #20]
      break;
 80022bc:	e002      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	617b      	str	r3, [r7, #20]
      break;
 80022c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	3301      	adds	r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	0e5b      	lsrs	r3, r3, #25
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	3301      	adds	r3, #1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002304:	69bb      	ldr	r3, [r7, #24]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	080027ec 	.word	0x080027ec
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200

08002324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800233c:	f7ff fa26 	bl	800178c <HAL_PWREx_GetVoltageRange>
 8002340:	6178      	str	r0, [r7, #20]
 8002342:	e014      	b.n	800236e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800235c:	f7ff fa16 	bl	800178c <HAL_PWREx_GetVoltageRange>
 8002360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d10b      	bne.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d919      	bls.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2ba0      	cmp	r3, #160	; 0xa0
 8002380:	d902      	bls.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002382:	2302      	movs	r3, #2
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e013      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002388:	2301      	movs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e010      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d902      	bls.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002394:	2303      	movs	r3, #3
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e00a      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d102      	bne.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e004      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d101      	bne.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	4909      	ldr	r1, [pc, #36]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40022000 	.word	0x40022000

080023e4 <__libc_init_array>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	4d0d      	ldr	r5, [pc, #52]	; (800241c <__libc_init_array+0x38>)
 80023e8:	4c0d      	ldr	r4, [pc, #52]	; (8002420 <__libc_init_array+0x3c>)
 80023ea:	1b64      	subs	r4, r4, r5
 80023ec:	10a4      	asrs	r4, r4, #2
 80023ee:	2600      	movs	r6, #0
 80023f0:	42a6      	cmp	r6, r4
 80023f2:	d109      	bne.n	8002408 <__libc_init_array+0x24>
 80023f4:	4d0b      	ldr	r5, [pc, #44]	; (8002424 <__libc_init_array+0x40>)
 80023f6:	4c0c      	ldr	r4, [pc, #48]	; (8002428 <__libc_init_array+0x44>)
 80023f8:	f000 f820 	bl	800243c <_init>
 80023fc:	1b64      	subs	r4, r4, r5
 80023fe:	10a4      	asrs	r4, r4, #2
 8002400:	2600      	movs	r6, #0
 8002402:	42a6      	cmp	r6, r4
 8002404:	d105      	bne.n	8002412 <__libc_init_array+0x2e>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	f855 3b04 	ldr.w	r3, [r5], #4
 800240c:	4798      	blx	r3
 800240e:	3601      	adds	r6, #1
 8002410:	e7ee      	b.n	80023f0 <__libc_init_array+0xc>
 8002412:	f855 3b04 	ldr.w	r3, [r5], #4
 8002416:	4798      	blx	r3
 8002418:	3601      	adds	r6, #1
 800241a:	e7f2      	b.n	8002402 <__libc_init_array+0x1e>
 800241c:	0800281c 	.word	0x0800281c
 8002420:	0800281c 	.word	0x0800281c
 8002424:	0800281c 	.word	0x0800281c
 8002428:	08002820 	.word	0x08002820

0800242c <memset>:
 800242c:	4402      	add	r2, r0
 800242e:	4603      	mov	r3, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <_init>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	bf00      	nop
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr

08002448 <_fini>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	bf00      	nop
 800244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244e:	bc08      	pop	{r3}
 8002450:	469e      	mov	lr, r3
 8002452:	4770      	bx	lr
